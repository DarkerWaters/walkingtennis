rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // setup functions to make consistent

    // is the request from the user requesting the
  	function isRequestingUser(userId) {
      return request.auth.uid == userId;
    }
    // is the user admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    // is the membership null or still active
		function isMember() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.expiry_member == null ||
      			 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.expiry_member > request.time
    }
    // helper to check if they are updating something important
    function notUpdating(field) {
      return !(field in request.resource.data) || !(field in resource.data) || (resource.data[field] == request.resource.data[field])
    }
    // there is no invalid change if not changing the private things here
    function noInvalidDataChange() {
    	return notUpdating('isAdmin') &&
            notUpdating('lcount_permitted') &&
            notUpdating('lpromotions_permitted') &&
      			notUpdating('expiry_coach') &&
            notUpdating('expiry_member');
    }
    // is the coaching subscription still active
		function isCoach() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.expiry_coach > request.time;
    }
    // Allow public write access to messages, but only users can read them
    match /users/{userId}/messages/{documents=**} {
	    allow read, delete: if isRequestingUser(userId) || isAdmin();
      // allow members to push a message to a user
      allow create: if isMember();
    }
    // Allow public read access to user data, but only content owners can write
    match /users/{userId}/{documents=**} {
	    allow read, delete: if isRequestingUser(userId) || isAdmin();
      // Disallow the creation of users with active subscriptions / admin rights
      allow update : if (noInvalidDataChange() && isRequestingUser(userId)) || isAdmin();
      allow create: if true;
      match /stripe_sources/{sourceId} {
        allow read: if request.auth.uid == uid;
      }
      match /stripe_tokens/{sourceId} {
        allow read,write: if request.auth.uid == uid;
      }
      match /stripe_charges/{chargeId} {
        allow read, write: if request.auth.uid == uid;
      }
    }
    match /admin_messages/{documents=**} {
    	// members can send us a message
      allow create : if isMember();
      // but only admin can read, delete, update
    	allow update, delete, read : if isAdmin();
    }
    match /lesson_plans/{documents=**} {
    	// only allow administrators to create lessons
    	allow update, delete, create : if isAdmin();
      // allow everyone to read all lessons
      allow read: if true;
    }
    match /coaching_lessons/{documents=**} {
    	// only allow administrators to create lessons
    	allow update, delete, create : if isAdmin();
      // allow coaches to read all lessons
      allow read: if isCoach() || isAdmin();
    }
    match /lessons/{documents=**} {
    	// only allow administrators to create lessons
    	allow update, delete, create, write : if isAdmin();
      // allow anyone to read lessons
      allow read: if true;
    }
    match /locations/{documents=**} {
      // allow members to read this published information
    	allow read: if isMember();
      // only allow the users to create, update and write their own data
      allow write, create, update : if (request.auth.uid == request.resource.data['user_uid'] && request.auth.uid == resource.data['user_uid']) || isAdmin();
      // can delete if the request comes from the user uid who owns the data (or admin)
      allow delete : if request.auth.uid == resource.data['user_uid'] || isAdmin();
    }
  }
}